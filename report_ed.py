#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jun 10 22:31:31 2011

import wx

if wx.Platform == '__WXMSW__':
    PLATFORM = 'windows'
    from wx.lib.pdfwin import PDFWindow
elif wx.Platform == '__WXGTK__':
    PLATFORM = 'linux'
    import wx.lib.wxcairo as wxcairo
    import poppler    

print PLATFORM
    
# begin wxGlade: extracode
# end wxGlade

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.mainpanel = wx.Panel(self, -1)
        self.splitter = wx.SplitterWindow(self.mainpanel, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.split2 = wx.Panel(self.splitter, -1)
        
        self.editorbuttonpanel = wx.Panel(self.split2, -1)
        self.buttonpanel6 = wx.Panel(self.editorbuttonpanel, -1)
        self.buttonpanel5 = wx.Panel(self.editorbuttonpanel, -1)

        self.split1 = wx.Panel(self.splitter, -1)

        self.pdfbuttonpanel = wx.Panel(self.split1, -1)
        self.buttonpanel4 = wx.Panel(self.pdfbuttonpanel, -1)
        self.buttonpanel3 = wx.Panel(self.pdfbuttonpanel, -1)
        self.buttonpanel2 = wx.Panel(self.pdfbuttonpanel, -1)
        self.buttonpanel1 = wx.Panel(self.pdfbuttonpanel, -1)
        self.buttonpanel7 = wx.Panel(self.pdfbuttonpanel, -1)
        self.buttonpanel8 = wx.Panel(self.pdfbuttonpanel, -1)
        
        #self.pdfviewer = wx.TextCtrl(self.split1, -1, "", style=wx.TE_MULTILINE)
        self.split1panel = wx.Panel(self.split1)
        
        if PLATFORM == 'linux':
            self.pdfviewer = PDFWindowLin(self.split1panel)
        elif PLATFORM == 'windows':
            self.pdfviewer = PDFWindowWin(self.split1)
            
        self.prevbutton = wx.Button(self.buttonpanel1, -1, "Prev Pg")
        self.nextbutton = wx.Button(self.buttonpanel2, -1, "Next Pg")
        self.savebutton = wx.Button(self.buttonpanel7, -1, "Save PDF")
        self.printbutton = wx.Button(self.buttonpanel8, -1, "Print PDF")
        self.refreshbutton = wx.Button(self.buttonpanel3, -1, "Refresh PDF")
        self.showbutton = wx.Button(self.buttonpanel4, -1, "Show Editor")

        self.editor = wx.TextCtrl(self.split2, -1, "", style=wx.TE_MULTILINE)
        self.savebutton = wx.Button(self.buttonpanel5, -1, "Save")
        self.revertbutton = wx.Button(self.buttonpanel6, -1, "Revert")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self._set_bindings()
        self.SetSize((800, 600))

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Report Editor")
        # end wxGlade

    def _set_bindings(self):
        self.showbutton.Bind(wx.EVT_BUTTON, self.togglesplit)

        
    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        mainsizer = wx.BoxSizer(wx.VERTICAL)
        mainpanelsizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        editorbuttonpanelsizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel6sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel5sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        pdfbuttonpanelsizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel4sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel3sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel2sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel1sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel7sizer = wx.BoxSizer(wx.HORIZONTAL)
        buttonpanel8sizer = wx.BoxSizer(wx.HORIZONTAL)

        
        #sizer_1.Add(self.pdfviewer, 4, wx.ALL|wx.EXPAND, 4)
        split1panelsizer = wx.BoxSizer(wx.HORIZONTAL)
        split1panelsizer.Add(self.pdfviewer, 1, wx.EXPAND)
        self.split1panel.SetSizer(split1panelsizer)
        sizer_1.Add(self.split1panel, 4, wx.ALL|wx.EXPAND, 4)


        buttonpanel1sizer.Add(self.prevbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel1.SetSizer(buttonpanel1sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel1, 1, wx.EXPAND, 0)

        buttonpanel2sizer.Add(self.nextbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel2.SetSizer(buttonpanel2sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel2, 1, wx.EXPAND, 0)

        buttonpanel7sizer.Add(self.savebutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel7.SetSizer(buttonpanel7sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel7, 1, wx.EXPAND, 0)

        buttonpanel8sizer.Add(self.printbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel8.SetSizer(buttonpanel8sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel8, 1, wx.EXPAND, 0)
        
        buttonpanel3sizer.Add(self.refreshbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel3.SetSizer(buttonpanel3sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel3, 1, wx.EXPAND, 0)

        buttonpanel4sizer.Add(self.showbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel4.SetSizer(buttonpanel4sizer)
        pdfbuttonpanelsizer.Add(self.buttonpanel4, 1, wx.EXPAND, 0)

        self.pdfbuttonpanel.SetSizer(pdfbuttonpanelsizer)
        sizer_1.Add(self.pdfbuttonpanel, 1, wx.EXPAND, 0)
        self.split1.SetSizer(sizer_1)
        sizer_2.Add(self.editor, 5, wx.ALL|wx.EXPAND, 5)
        buttonpanel5sizer.Add(self.savebutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel5.SetSizer(buttonpanel5sizer)
        editorbuttonpanelsizer.Add(self.buttonpanel5, 1, wx.EXPAND, 0)
        buttonpanel6sizer.Add(self.revertbutton, 0,
                              wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.buttonpanel6.SetSizer(buttonpanel6sizer)
        editorbuttonpanelsizer.Add(self.buttonpanel6, 1, wx.EXPAND, 0)
        self.editorbuttonpanel.SetSizer(editorbuttonpanelsizer)
        sizer_2.Add(self.editorbuttonpanel, 1, wx.EXPAND, 0)
        self.split2.SetSizer(sizer_2)
        self.splitter.SplitHorizontally(self.split1, self.split2)
        self.splitter.Unsplit()
        
        mainpanelsizer.Add(self.splitter, 1, wx.EXPAND, 0)
        self.mainpanel.SetSizer(mainpanelsizer)
        mainsizer.Add(self.mainpanel, 1, wx.EXPAND, 0)
        self.SetSizer(mainsizer)
        mainsizer.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame

    def togglesplit(self, event):
        """Unsplit or resplit the splitter"""
        if self.splitter.IsSplit():
            self.splitter.Unsplit()
            self.showbutton.SetLabel('Show Editor')
        else:
            self.splitter.SplitHorizontally(self.split1, self.split2)
            self.splitter.SetSashPosition(self.GetSize()[1]*0.5, True)
            self.showbutton.SetLabel('Hide Editor') 

        
class PDFWindowLin(wx.ScrolledWindow):
    """pdf viewer window. Taken from
    http://code.activestate.com/recipes/577195-wxpython-pdf-viewer-using-poppler/"""

    MAX_SCALE = 2
    MIN_SCALE = 1
    SCROLLBAR_UNITS = 20  # pixels per scrollbar unit

    def __init__(self, parent):
        wx.ScrolledWindow.__init__(self, parent, wx.ID_ANY)
        # Wrap a panel inside
        self.panel = wx.Panel(self)
        # Initialize variables
        self.n_page = 0
        self.scale = 1
        self.document = None
        self.n_pages = None
        self.current_page = None
        self.width = None
        self.height = None
        # Connect panel events
        self.panel.Bind(wx.EVT_PAINT, self.on_paint)
        self.panel.Bind(wx.EVT_KEY_DOWN, self.on_keydown)
        self.panel.Bind(wx.EVT_LEFT_DOWN, self.on_leftdown)
        self.panel.Bind(wx.EVT_RIGHT_DOWN, self.on_rightdown)

        
    def load_file(self, file):
        self.document = poppler.document_new_from_file("file://" + file, None)
        self.n_pages = self.document.get_n_pages()
        self.current_page = self.document.get_page(self.n_page)
        self.width, self.height = self.current_page.get_size() 
        self._update_size()

    def on_paint(self, event):
        dc = wx.PaintDC(self.panel)
        cr = wxcairo.ContextFromDC(dc)
        cr.set_source_rgb(1, 1, 1)  # White background
        if self.scale != 1:
            cr.scale(self.scale, self.scale)
            
        try:
            cr.rectangle(0, 0, self.width, self.height)
        except TypeError:
            cr.rectangle(0, 0, 680, 400)
            
        cr.fill()

        if self.current_page:
            self.current_page.render(cr)

    def on_leftdown(self, event):
        self._updatescale(self.scale + 0.2)

    def on_rightdown(self, event):
        self._update_scale(self.scale - 0.2)

    def _update_scale(self, new_scale):
        if new_scale >= PDFWindowLin.MIN_SCALE and new_scale <= PDFWindowLin.MAX_SCALE:
            self.scale = new_scale
            # Obtain the current scroll position
            prev_position = self.GetViewStart() 
            # Scroll to the beginning because I'm going to redraw all the panel
            self.Scroll(0, 0) 
            # Redraw (calls OnPaint and such)
            self.Refresh() 
            # Update panel Size and scrollbar config
            self._update_size()
            # Get to the previous scroll position
            self.Scroll(prev_position[0], prev_position[1]) 

    def _update_size(self):
        u = PDFWindowLin.SCROLLBAR_UNITS
        self.panel.SetSize((self.width*self.scale, self.height*self.scale))
        self.SetScrollbars(u, u, (self.width*self.scale)/u, (self.height*self.scale)/u)

    def on_keydown(self, event):
        update = True
        # More keycodes in http://docs.wxwidgets.org/stable/wx_keycodes.html#keycodes
        keycode = event.GetKeyCode() 
        if keycode in (wx.WXK_PAGEDOWN, wx.WXK_SPACE):
            next_page = self.n_page + 1
        elif keycode == wx.WXK_PAGEUP:
            next_page = self.n_page - 1
        else:
            update = False
        if update and (next_page >= 0) and (next_page < self.n_pages):
            self.n_page = next_page
            self.current_page = self.document.get_page(next_page)
            self.Refresh()


    def goto_nextpage(self):
        """go to next page"""
        if self.n_page + 1 <= self.n_pages:
            self.n_page += 1
            self.current_page = self.document.get_page(self.n_page)
            self.Refresh()

        else:
            print 'Already at last page'
            return

    def goto_previouspage(self):
        """go to previous page"""
        if self.n_page > 0:
            self.n_page -= 1
            self.current_page = self.document.get_page(self.n_page)
            self.Refresh()

        else:
            print 'Already at first page'
            return



class PDFWindowWin(wx.Panel):
    """Adobe based pdf viewer for windows"""
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        #PDFWindow.__init__(self, style = wx.SUNKEN_BORDER)
        self.pdfwin = PDFWindow(self)
        sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer.Add(self.pdfwin, 1, wx.EXPAND)
        self.SetSizer(sizer)
        
    def goto_previouspage(self):
        self.gotoPreviousPage()

    def goto_nextpage(self):
        self.gotoNextPage()

    def load_file(self, file):
        self.pdfwin.LoadFile(file)


def test_pdfviewer():
    app = wx.App()
    ed = wx.Frame(None, -1, 'pdfviewer')

    if PLATFORM == 'windows':
        pdfwin = PDFWindowWin(ed)
    elif PLATFORM == 'linux':
        pdfwin = PDFWindowLin(ed)

    ed.Show()
    ed.SetSize((400, 400))

    if PLATFORM == 'linux':
        pdfwin.load_file('/data/Dropbox/programming/EP_report2/ep_report/reports/arun.pdf')
    elif PLATFORM == 'windows':
        pdfwin.load_file('F:/EP_report2/ep_report/reports/arun.pdf')
    
    app.MainLoop()        

        
def test_ed_gui():
    app = wx.App()
    ed = MyFrame(None, -1, "")
    app.SetTopWindow(ed)
    ed.Show()
    app.MainLoop()

    
if __name__ == "__main__":
    test_ed_gui()
    #test_pdfviewer()
